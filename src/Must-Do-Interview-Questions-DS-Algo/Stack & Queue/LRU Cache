LRU cache implementaion. This is the most important question of Stack and Queue!


/*Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above.*/

/*The structure of the class is as follows 
class LRUCache
{
public:
    LRUCache(int );
    int get(int );
    void set(int , int );
};*/
/*You are required to complete below methods */
/*Inititalize an LRU cache with size N */
int c=0;
map<int ,int >m;
list<int>q;
LRUCache::LRUCache(int N)
{
    m.clear();
    q.clear();
     c=N;
     //Your code here
}
/*Sets the key x with value y in the LRU cache */
void LRUCache::set(int x, int y) 
{
map<int ,int >::iterator it;
it=m.find(x);
if(it==m.end()){
    if(q.size()==c){
        int t=q.front();
        q.pop_front();
        m.erase(t);
    }
    
}
else{
    q.remove(x);
    m.erase(x);
}
    q.push_back(x);
    m[x]=y;
    
}
/*Returns the value of the key x if 
present else returns -1 */
int LRUCache::get(int x)
{
    map<int ,int >::iterator it;
    it=m.find(x);
    if(it==m.end())
    return -1;
    q.remove(x);
    q.push_back(x);
    return it->second;
    //Your code here
}
