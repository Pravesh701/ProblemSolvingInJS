There are two singly linked lists in a system. By some programming error the end node of one of the linked list got linked into the second list, forming a inverted Y shaped list.
Write a program to get the point where two linked lists merge.

Expected time complexity is O(m + n) where m and n are lengths of two linked lists




// Complete the findMergeNode function below.

/*
 * For your reference:
 *
 * SinglyLinkedListNode {
 *     int data;
 *     SinglyLinkedListNode* next;
 * };
 *
}
*/
int getCount(SinglyLinkedListNode *head) {
 SinglyLinkedListNode *current = head;
  int count = 0;

  while (current != NULL) {
    count++;
    current = current->next;
  }

  return count;
}

int getNode(int d, SinglyLinkedListNode *head1, SinglyLinkedListNode *head2) {
  int i;
  SinglyLinkedListNode *current1 = head1;
  SinglyLinkedListNode *current2 = head2;

  for (i = 0; i < d; i++) {
    if (current1 == NULL) {
      return -1;
    }
    current1 = current1->next;
  }

  while (current1 != NULL && current2 != NULL) {
    if (current1 == current2)
      return current1->data;
    current1 = current1->next;
    current2 = current2->next;
  }

  return -1;
}

int findMergeNode(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {
  // Complete this function
  // Do not write the main method.
  int c1 = getCount(head1);
  int c2 = getCount(head2);
  int d;

  if (c1 > c2) {
    d = c1 - c2;
    return getNode(d, head1, head2);
  } else {
    d = c2 - c1;
    return getNode(d, head2, head1);
  }
}
